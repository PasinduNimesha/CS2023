#include <iostream>
#include <vector>
#include <chrono>
using namespace std;

struct heap{
    vector<int> a;
    int size;
    int length;
};

heap max_heapify(heap A, int i){
    int l = i*2+1;
    int r = i*2+2;
    int largest, temp;
    if(l < A.size && A.a[l] > A.a[i]){
        largest = l;
    }
    else{
        largest = i;
    }
    if(r < A.size && A.a[r] > A.a[largest]){
        largest = r;
    }
    if(largest != i){
        temp = A.a[i];
        A.a[i] = A.a[largest];
        A.a[largest] = temp;
    }
    if(r >= A.size || l >= A.size || largest == i){
        return A;
    }
    else{
        return max_heapify(A, largest);
    }
}

heap buildMaxHeap(heap a){
    int i = (a.size/2) -1;
    for(i; i >= 0; i-- ){
        a = max_heapify(a, i);
        // for(int j = 0; j < a.a.size(); j++){
        //     cout<< a.a[j]<<" ";
        // }
        // cout<<endl;
    }
    return a;
}

heap heapSort(heap A){
    int size = A.size;
    int i = A.size;
    int temp;
    for(int i = size -1; i >= 1; i--){
        temp = A.a[i];
        A.a[i] = A.a[0];
        A.a[0] = temp;
        A.size--;
        A = max_heapify(A, 0);
    }
    return A;
}



int main(){

    heap heap1;
    heap1.a = {264, 429, 250, 320, 71, 44, 61, 366, 410, 139, 349, 98, 424, 216, 125, 33, 162, 289, 213, 36, 24, 452, 90, 391, 499, 471, 258, 272, 318, 375, 498, 14, 108, 101, 475, 5, 158, 288, 277, 467, 4, 205, 11, 52, 138, 56, 395, 102, 488, 179, 184, 377, 83, 65, 462, 496, 307, 415, 457, 27, 319, 194, 361, 55, 210, 174, 10, 476, 203, 72, 295, 229, 64, 237, 81, 143, 397, 432, 337, 388, 136, 330, 500, 49, 378, 285, 32, 483, 226, 246, 309, 221, 489, 445, 159, 182, 197, 284, 351, 394, 79, 58, 37, 477, 183, 482, 154, 348, 465, 68, 406, 57, 430, 490, 287, 94, 481, 308, 80, 474, 442, 472, 325, 369, 76, 454, 332, 353, 350, 170, 46, 242, 35, 40, 451, 177, 202, 198, 367, 238, 252, 42, 25, 123, 70, 396, 45, 453, 26, 104, 480, 92, 398, 144, 416, 290, 491, 405, 466, 161, 303, 298, 401, 468, 402, 380, 51, 444, 167, 232, 418, 181, 321, 157, 357, 420, 34, 218, 326, 261, 15, 41, 433, 196, 195, 166, 435, 62, 67, 135, 262, 274, 130, 340, 187, 20, 165, 324, 208, 114, 235, 425, 204, 245, 91, 275, 269, 160, 270, 126, 148, 281, 9, 291, 145, 156, 371, 485, 343, 48, 316, 29, 385, 460, 409, 345, 494, 421, 223, 423, 8, 478, 191, 441, 392, 178, 260, 459, 96, 417, 312, 427, 253, 387, 243, 386, 97, 282, 455, 244, 100, 249, 233, 121, 267, 77, 234, 413, 73, 422, 86, 225, 168, 328, 113, 278, 12, 169, 484, 53, 137, 117, 408, 301, 404, 111, 344, 436, 358, 263, 497, 486, 364, 118, 16, 190, 305, 175, 54, 87, 469, 341, 379, 112, 439, 294, 120, 85, 199, 492, 2, 256, 458, 215, 399, 21, 220, 23, 368, 189, 297, 384, 327, 346, 273, 193, 63, 390, 276, 107, 440, 266, 222, 151, 335, 479, 172, 236, 1, 206, 464, 124, 66, 31, 407, 247, 127, 271, 411, 456, 336, 286, 38, 214, 78, 93, 6, 360, 354, 155, 355, 152, 434, 30, 463, 105, 329, 283, 493, 18, 333, 443, 370, 164, 426, 306, 99, 302, 438, 116, 89, 134, 363, 212, 280, 7, 129, 334, 448, 323, 239, 374, 365, 84, 109, 141, 146, 310, 352, 201, 257, 381, 60, 450, 69, 339, 147, 362, 228, 431, 314, 39, 185, 50, 207, 376, 180, 110, 292, 359, 115, 75, 47, 342, 347, 293, 313, 150, 356, 74, 241, 19, 315, 28, 487, 95, 163, 265, 414, 428, 254, 82, 389, 227, 153, 393, 311, 473, 419, 224, 132, 403, 217, 447, 149, 437, 461, 338, 230, 171, 322, 59, 231, 300, 296, 133, 372, 279, 173, 446, 268, 495, 103, 382, 259, 211, 192, 219, 140, 186, 88, 400, 240, 13, 22, 255, 200, 449, 299, 142, 331, 119, 3, 317, 188, 176, 17, 412, 248, 373, 383, 131, 209, 304, 470, 128, 122, 251, 43, 106};
    heap1.length = 511;
    heap1.size = heap1.a.size();
    auto start = std::chrono::high_resolution_clock::now();
    heap heapified = buildMaxHeap(heap1);

    // for(int i = 0; i < heap1.a.size(); i++){
    //     cout<< heapified.a[i]<<" ";
    // }
    // cout<<endl;
    heap sorted = heapSort(heapified);
    auto end = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
    for(int i = 0; i < heap1.a.size(); i++){
        cout<< sorted.a[i]<<" ";
    }
    cout<<endl;
    std::cout << "Execution time: " << duration.count() << " microseconds" << std::endl;

    return 0;
}